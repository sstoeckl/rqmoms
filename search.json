[{"path":"https://sstoeckl.github.io/rqmoms/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Sebastian Stöckl Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://sstoeckl.github.io/rqmoms/articles/python-parity.html","id":"goal","dir":"Articles","previous_headings":"","what":"Goal","title":"Python parity: rqmoms vs vilkovgr/qmoms","text":"vignette demonstrates numerical parity pure-R implementation rqmoms original Python package vilkovgr/qmoms inputs parameters. safe knit CI/CRAN (Python parts skipped default). enable Python comparison locally: Create virtualenv python/.venv install Python repo (editable) , set RQMOMS_VENV venv path. Set RQMOMS_BUILD_PY=1 session (.Renviron).","code":""},{"path":[]},{"path":"https://sstoeckl.github.io/rqmoms/articles/python-parity.html","id":"libraries-packaged-data","dir":"Articles","previous_headings":"","what":"Libraries & packaged data","title":"Python parity: rqmoms vs vilkovgr/qmoms","text":"","code":"library(rqmoms) library(dplyr) >  > Attaching package: 'dplyr' > The following objects are masked from 'package:stats': >  >     filter, lag > The following objects are masked from 'package:base': >  >     intersect, setdiff, setequal, union  # Packaged datasets ship with the package str(qmoms_surface) > tibble [234 × 7] (S3: tbl_df/tbl/data.frame) >  $ id             : int [1:234] 10078 10078 10078 10078 10078 10078 10078 10078 10078 10078 ... >  $ date           : Date[1:234], format: \"1996-01-04\" \"1996-01-04\" ... >  $ days           : int [1:234] 30 30 30 30 30 30 30 30 30 30 ... >  $ mnes           : num [1:234] 0.843 0.853 0.879 0.886 0.912 ... >  $ prem           : num [1:234] 0.191 0.0277 0.1657 0.0372 0.1442 ... >  $ impl_volatility: num [1:234] 0.847 0.778 0.84 0.777 0.834 ... >  $ delta          : num [1:234] 80 -20 75 -25 70 -30 65 -35 -40 60 ... head(qmoms_zerocd) >  [38;5;246m# A tibble: 6 × 3 [39m >   date        days  rate >    [3m [38;5;246m<date> [39m [23m      [3m [38;5;246m<int> [39m [23m  [3m [38;5;246m<dbl> [39m [23m >  [38;5;250m1 [39m 1996-01-02     9  5.76 >  [38;5;250m2 [39m 1996-01-02    15  5.75 >  [38;5;250m3 [39m 1996-01-02    50  5.67 >  [38;5;250m4 [39m 1996-01-02    78  5.61 >  [38;5;250m5 [39m 1996-01-02   169  5.47 >  [38;5;250m6 [39m 1996-01-02   260  5.35"},{"path":"https://sstoeckl.github.io/rqmoms/articles/python-parity.html","id":"detect-optional-python-reference","dir":"Articles","previous_headings":"","what":"Detect (optional) Python reference","title":"Python parity: rqmoms vs vilkovgr/qmoms","text":"convenience define small wrapper (used has_py = TRUE):","code":"has_py <- identical(Sys.getenv(\"RQMOMS_BUILD_PY\", \"0\"), \"1\") if (has_py) {   venv <- Sys.getenv(\"RQMOMS_VENV\", file.path(\"python\", \".venv\"))   ok <- FALSE   try({     reticulate::use_virtualenv(venv, required = TRUE)     reticulate::py_run_string(\"import numpy as np\\nif not hasattr(np,'NAN'): np.NAN = np.nan\")     # Prefer submodule path if present     srcs <- c(file.path(\"python\",\"qmoms_src\"), file.path(\"python\",\"qmoms\"))     srcs <- srcs[dir.exists(srcs)]     if (length(srcs)) {       reticulate::py_run_string(sprintf(         \"import sys; sys.path.insert(0, r'%s')\",         normalizePath(srcs[[1]], winslash = \"/\", mustWork = TRUE)       ))     }     reticulate::import(\"qmoms\")     ok <- TRUE   }, silent = TRUE)   has_py <- ok }  if (!has_py) {   cat(\"**Python parity is disabled.** Set `RQMOMS_BUILD_PY=1` and point `RQMOMS_VENV` to a valid virtualenv to run the comparison.\\n\") } > **Python parity is disabled.** Set `RQMOMS_BUILD_PY=1` and point `RQMOMS_VENV` to a valid virtualenv to run the comparison. py_compute <- function(mnes, vol, days, rate, params) {   m <- reticulate::import(\"qmoms\")   out <- m$qmoms_compute(     mnes = as.numeric(mnes), vol = as.numeric(vol),     days = as.integer(days), rate = as.numeric(rate),     params = reticulate::r_to_py(params, convert = TRUE),     output = \"pandas\"   )   r <- reticulate::py_to_r(out)   if (is.atomic(r)) { nm <- names(r); r <- as.list(r); if (!is.null(nm)) names(r) <- nm   } else if (is.data.frame(r)) { r <- as.list(r[1, , drop = TRUE]) }   r }"},{"path":"https://sstoeckl.github.io/rqmoms/articles/python-parity.html","id":"single-surface-side-by-side","dir":"Articles","previous_headings":"","what":"Single surface: side-by-side","title":"Python parity: rqmoms vs vilkovgr/qmoms","text":"","code":"params <- rq_default_params() one <- subset(qmoms_surface,               id == qmoms_surface$id[1] & days == qmoms_surface$days[1]) r30 <- get_rate_for_maturity(qmoms_zerocd, date = one$date[1], days = one$days[1])  r_out <- qmoms_compute(one$mnes, one$impl_volatility, one$days[1], r30,                        params = params, output = \"list\") str(r_out) > List of 17 >  $ nopt       : int 234 >  $ smfiv      : num 6.39 >  $ mfiv_bkm   : num 3.1 >  $ mfiv_bjn   : num 3.92 >  $ smfivd     : num 0.0076 >  $ mfivd_bkm  : num 0.0115 >  $ mfivd_bjn  : num 0.01 >  $ mfis       : num -0.0476 >  $ mfik       : num 3.28 >  $ cvix_sigma2: num 1.94 >  $ cvix_mnes20: num 1.2 >  $ rix        : num 0.00151 >  $ rixnorm    : num 0.131 >  $ tlm_sigma2 : num NA >  $ tlm_delta20: num NA >  $ slopedn    : num NA >  $ slopeup    : num -3.46e-16 py_out <- py_compute(one$mnes, one$impl_volatility, one$days[1], r30, params)  keys <- intersect(names(r_out), names(py_out)) tab <- tibble::tibble(   metric = keys,   R      = unlist(r_out[keys]),   Python = unlist(py_out[keys]),   abs_diff = abs(R - Python) ) tab <- dplyr::arrange(tab, desc(abs_diff)) knitr::kable(head(tab, 20), digits = 6, caption = \"Single surface: top absolute differences\")"},{"path":"https://sstoeckl.github.io/rqmoms/articles/python-parity.html","id":"all-groups-parity-summary","dir":"Articles","previous_headings":"","what":"All groups: parity summary","title":"Python parity: rqmoms vs vilkovgr/qmoms","text":"merge zero curve surface run engines every (id, date, days) group.","code":"surf_r <- get_rate_for_maturity(qmoms_zerocd, df_surf = qmoms_surface) groups <- split(surf_r, list(surf_r$id, surf_r$date, surf_r$days), drop = TRUE) length(groups) > [1] 9 key_metrics <- c(\"smfiv\",\"mfiv_bkm\",\"mfiv_bjn\",                  \"smfivd\",\"mfivd_bkm\",\"mfivd_bjn\",                  \"mfis\",\"mfik\",\"rix\",\"rixnorm\",\"slopedn\",\"slopeup\")  compare_one <- function(g) {   rlist <- qmoms_compute(g$mnes, g$impl_volatility, g$days[1], g$rate[1],                          params = params, output = \"list\")   pylist <- py_compute(g$mnes, g$impl_volatility, g$days[1], g$rate[1], params)   keys <- intersect(key_metrics, intersect(names(rlist), names(pylist)))   if (!length(keys)) return(NULL)   tibble::tibble(     id   = g$id[1], date = g$date[1], days = g$days[1],     metric = keys,     R = unlist(rlist[keys]),     Python = unlist(pylist[keys]),     abs_diff = abs(R - Python)   ) }  all_cmp <- vctrs::vec_rbind(!!!lapply(groups, compare_one))  summary_tab <- all_cmp |>   dplyr::group_by(metric) |>   dplyr::summarise(     n        = dplyr::n(),     mean_abs = mean(abs_diff, na.rm = TRUE),     p95_abs  = quantile(abs_diff, 0.95, na.rm = TRUE),     max_abs  = max(abs_diff, na.rm = TRUE),     .groups = \"drop\"   ) |>   dplyr::arrange(desc(max_abs))  knitr::kable(summary_tab, digits = 6, caption = \"All groups: absolute-difference summary by metric\")"},{"path":"https://sstoeckl.github.io/rqmoms/articles/python-parity.html","id":"visual-check-example-metric","dir":"Articles","previous_headings":"All groups: parity summary","what":"Visual check (example metric)","title":"Python parity: rqmoms vs vilkovgr/qmoms","text":"","code":"m <- \"mfiv_bkm\" x <- all_cmp$abs_diff[all_cmp$metric == m] hist(x, breaks = 30, main = sprintf(\"Absolute differences: %s\", m), xlab = \"abs diff\")"},{"path":"https://sstoeckl.github.io/rqmoms/articles/python-parity.html","id":"tolerances-used-in-automated-tests","dir":"Articles","previous_headings":"","what":"Tolerances used in automated tests","title":"Python parity: rqmoms vs vilkovgr/qmoms","text":"reference, package’s tests use tolerances comparing R Python: Variance integrals (smfiv, mfiv_bkm, mfiv_bjn, semivariances): 5e-4 Higher moments (mfis, mfik): 5e-3 5e-2, respectively Slopes (slopedn, slopeup): 5e-3 rix, rixnorm: 5e-4 CVIX/TLM windows: 5e-4 / 5e-2 (window-dependent) see observed differences comfortably within thresholds RQMOMS_BUILD_PY=1 enabled.","code":""},{"path":"https://sstoeckl.github.io/rqmoms/articles/python-parity.html","id":"notes","dir":"Articles","previous_headings":"","what":"Notes","title":"Python parity: rqmoms vs vilkovgr/qmoms","text":"Interpolation uses PCHIP clamping (via pracma::pchip) mirror SciPy’s PchipInterpolator. Grid, integration weights, slope sign convention, window logic implemented identically Python reference. Packaged datasets qmoms_surface qmoms_zerocd derived Python examples; rates converted decimal CSV used percent.","code":""},{"path":"https://sstoeckl.github.io/rqmoms/articles/python-parity.html","id":"credits","dir":"Articles","previous_headings":"","what":"Credits","title":"Python parity: rqmoms vs vilkovgr/qmoms","text":"parity check compares vilkovgr/qmoms, remains reference implementation. R package aims numerical identity given inputs parameters.","code":""},{"path":"https://sstoeckl.github.io/rqmoms/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sebastian Stöckl. Author, maintainer.","code":""},{"path":"https://sstoeckl.github.io/rqmoms/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Stöckl S (2025). rqmoms: Package (One Line, Title Case). R package version 0.0.0.9000, https://sstoeckl.github.io/rqmoms/.","code":"@Manual{,   title = {rqmoms: What the Package Does (One Line, Title Case)},   author = {Sebastian Stöckl},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://sstoeckl.github.io/rqmoms/}, }"},{"path":[]},{"path":"https://sstoeckl.github.io/rqmoms/index.html","id":"rqmoms-","dir":"","previous_headings":"","what":"rqmoms","title":"rqmoms","text":"Option-Implied Moments & Diagnostics Pure R — faithful port Python package vilkovgr/qmoms identical function signatures, output keys, defaults. ⚖️ Scientific intent: rqmoms aims numerical identity reference Python implementation given IV surface parameter set. dev-Python reference workflow (ignored builds) can used locally double-check results.","code":""},{"path":"https://sstoeckl.github.io/rqmoms/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"rqmoms","text":"Soon, installation possible CRAN util can installed github : rqmoms imports: dplyr, tibble, purrr, cli, stats, vctrs, pracma.","code":"# From source (development) install.packages(\"rqmoms\") # install.packages(\"devtools\") devtools::install_github(\"sstoeckl/rqmoms\")"},{"path":"https://sstoeckl.github.io/rqmoms/index.html","id":"packaged-example-data","dir":"","previous_headings":"","what":"Packaged example data","title":"rqmoms","text":"package ships two datasets (loaded automatically library(rqmoms)): qmoms_surface — IV surface snapshots (columns: id, date, days, mnes, impl_volatility, optional: delta, best_bid, best_offer, open_interest, prem) qmoms_zerocd — zero curve date days (decimal; e.g. 0.02 = 2% p..) derived Python repo’s data/surface.csv data/zerocd.csv.","code":"library(rqmoms) str(qmoms_surface) > Classes 'tbl_df', 'tbl' and 'data.frame': 234 obs. of  7 variables: >  $ id             : int  10078 10078 10078 10078 10078 10078 10078 10078 10078 10078 ... >  $ date           : Date, format: \"1996-01-04\" \"1996-01-04\" ... >  $ days           : int  30 30 30 30 30 30 30 30 30 30 ... >  $ mnes           : num  0.843 0.853 0.879 0.886 0.912 ... >  $ prem           : num  0.191 0.0277 0.1657 0.0372 0.1442 ... >  $ impl_volatility: num  0.847 0.778 0.84 0.777 0.834 ... >  $ delta          : num  80 -20 75 -25 70 -30 65 -35 -40 60 ... head(qmoms_zerocd) >         date days     rate > 1 1996-01-02    9 5.763067 > 2 1996-01-02   15 5.745902 > 3 1996-01-02   50 5.673317 > 4 1996-01-02   78 5.608884 > 5 1996-01-02  169 5.473762 > 6 1996-01-02  260 5.352667"},{"path":"https://sstoeckl.github.io/rqmoms/index.html","id":"quick-start--single-surface-mirrors-python-qmoms_compute","dir":"","previous_headings":"","what":"Quick start — single surface (mirrors Python qmoms_compute())","title":"rqmoms","text":"","code":"params <- rq_default_params()  # pick one (id, date, days) one <- subset(qmoms_surface,               id == qmoms_surface$id[1] & days == qmoms_surface$days[1])  # rate from the zero curve (interpolated at this date/maturity) r30  <- get_rate_for_maturity(qmoms_zerocd,                               date = one$date[1],                               days = one$days[1])  res <- qmoms_compute(   mnes   = one$mnes,   vol    = one$impl_volatility,   days   = one$days[1],   rate   = r30,   params = params,   output = \"list\" ) str(res) > List of 17 >  $ nopt       : int 234 >  $ smfiv      : num 6.39 >  $ mfiv_bkm   : num 3.1 >  $ mfiv_bjn   : num 3.92 >  $ smfivd     : num 0.0076 >  $ mfivd_bkm  : num 0.0115 >  $ mfivd_bjn  : num 0.01 >  $ mfis       : num -0.0476 >  $ mfik       : num 3.28 >  $ cvix_sigma2: num 1.94 >  $ cvix_mnes20: num 1.2 >  $ rix        : num 0.00151 >  $ rixnorm    : num 0.131 >  $ tlm_sigma2 : num NA >  $ tlm_delta20: num NA >  $ slopedn    : num NA >  $ slopeup    : num -2.29e-15"},{"path":"https://sstoeckl.github.io/rqmoms/index.html","id":"whole-dataframe--grouped-compute-mirrors-python-readme","dir":"","previous_headings":"","what":"Whole-dataframe — grouped compute (mirrors Python README)","title":"rqmoms","text":"First, merge/interpolate rates surface:","code":"library(dplyr) >  > Attache Paket: 'dplyr' > Die folgenden Objekte sind maskiert von 'package:stats': >  >     filter, lag > Die folgenden Objekte sind maskiert von 'package:base': >  >     intersect, setdiff, setequal, union  # exact-maturity rate interpolation by date surf_r <- get_rate_for_maturity(qmoms_zerocd, df_surf = qmoms_surface)"},{"path":"https://sstoeckl.github.io/rqmoms/index.html","id":"a-dplyr-group_map","dir":"","previous_headings":"Whole-dataframe — grouped compute (mirrors Python README)","what":"A) dplyr group_map()","title":"rqmoms","text":"","code":"res_bygroup <- surf_r |>   dplyr::group_by(id, date, days) |>   dplyr::group_map(~{     # .x: rows of the group (no keys); .y: one-row tibble of keys     tibble::as_tibble(       c(         list(id = .y$id[[1]], date = .y$date[[1]], days = .y$days[[1]]),         qmoms_compute(           mnes   = .x$mnes,           vol    = .x$impl_volatility,           days   = .y$days[[1]],           rate   = .x$rate[1],           params = params,           output = \"list\"         )       )     )   }) |>   dplyr::bind_rows()  dplyr::glimpse(res_bygroup) > Rows: 9 > Columns: 20 > $ id          <int> 10078, 10078, 10078, 10078, 10078, 10078, 10078, 10078, 10… > $ date        <date> 1996-01-04, 1996-01-05, 1996-01-08, 1996-01-09, 1996-01-1… > $ days        <int> 30, 30, 30, 30, 30, 30, 30, 30, 30 > $ nopt        <int> 26, 26, 26, 26, 26, 26, 26, 26, 26 > $ smfiv       <dbl> 6.079506, 6.118586, 6.155363, 6.197620, 6.356862, 6.012891… > $ mfiv_bkm    <dbl> 3.039818, 3.041774, 3.046623, 3.066407, 3.084455, 3.030018… > $ mfiv_bjn    <dbl> 3.809570, 3.818995, 3.830234, 3.855023, 3.901564, 3.788134… > $ smfivd      <dbl> 0.003832652, 0.003139576, 0.003262268, 0.006018649, 0.0040… > $ mfivd_bkm   <dbl> 0.004951385, 0.003880698, 0.004068641, 0.007911383, 0.0051… > $ mfivd_bjn   <dbl> 0.004538752, 0.003611914, 0.003775383, 0.007208670, 0.0047… > $ mfis        <dbl> -0.090644976, -0.024247430, -0.015743917, -0.109163284, 0.… > $ mfik        <dbl> 3.262624, 3.129021, 3.101145, 3.287541, 3.001450, 3.364392… > $ cvix_sigma2 <dbl> 1.899215, 1.900327, 1.903911, 1.915603, 1.926735, 1.893552… > $ cvix_mnes20 <dbl> 1.197292, 1.194654, 1.194702, 1.202204, 1.198877, 1.198188… > $ rix         <dbl> 0.0004126325, 0.0002687845, 0.0002932578, 0.0007027131, 0.… > $ rixnorm     <dbl> 0.08333678, 0.06926188, 0.07207760, 0.08882305, 0.07299096… > $ tlm_sigma2  <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA > $ tlm_delta20 <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA > $ slopedn     <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA > $ slopeup     <dbl> -1.637620e-15, -3.249709e-15, 1.608695e-15, 2.615529e-15, …"},{"path":"https://sstoeckl.github.io/rqmoms/index.html","id":"b-convenience-wrapper-qmoms_compute_bygroup","dir":"","previous_headings":"Whole-dataframe — grouped compute (mirrors Python README)","what":"B) Convenience wrapper qmoms_compute_bygroup()","title":"rqmoms","text":"prefer, can call wrapper group.","code":"res_bygroup2 <- surf_r |>   dplyr::group_by(id, date, days) |>   dplyr::group_map(~{     qmoms_compute_bygroup(       list(.x, params),       id   = .y$id[[1]],       date = .y$date[[1]],       days = .y$days[[1]],       rate = .x$rate[1]     )   }) |>   dplyr::bind_rows()  # Same result (up to column order) dplyr::all_equal(   dplyr::arrange(res_bygroup,  id, date, days),   dplyr::arrange(res_bygroup2, id, date, days) ) > Warning: `all_equal()` was deprecated in dplyr 1.1.0. > ℹ Please use `all.equal()` instead. > ℹ And manually order the rows/cols as needed > This warning is displayed once every 8 hours. > Call `lifecycle::last_lifecycle_warnings()` to see where this warning was > generated. > [1] TRUE"},{"path":"https://sstoeckl.github.io/rqmoms/index.html","id":"c-column-mapping-example-mirrors-python-columndtype-mapping","dir":"","previous_headings":"Whole-dataframe — grouped compute (mirrors Python README)","what":"C) Column mapping example (mirrors Python column/dtype mapping)","title":"rqmoms","text":"","code":"# rename columns df_alt <- surf_r |>   dplyr::rename(ID = id, Date = date, Days = days, Rate = rate, M = mnes, IV = impl_volatility)  # mapping for the wrapper map <- list(id = \"ID\", date = \"Date\", days = \"Days\", rate = \"Rate\", mnes = \"M\", impl_volatility = \"IV\")  # one group through the wrapper gs <- df_alt |>   dplyr::group_by(ID, Date, Days) |>   dplyr::group_split()  ex_mapped <- qmoms_compute_bygroup(   list(gs[[1]], params),   id   = dplyr::first(gs[[1]]$ID),   date = dplyr::first(gs[[1]]$Date),   days = dplyr::first(gs[[1]]$Days),   rate = dplyr::first(gs[[1]]$Rate),   cols_map = map ) ex_mapped > # A tibble: 1 × 20 >      id date        days  nopt smfiv mfiv_bkm mfiv_bjn  smfivd mfivd_bkm >   <int> <date>     <int> <int> <dbl>    <dbl>    <dbl>   <dbl>     <dbl> > 1 10078 1996-01-04    30    26  6.08     3.04     3.81 0.00383   0.00495 > # ℹ 11 more variables: mfivd_bjn <dbl>, mfis <dbl>, mfik <dbl>, > #   cvix_sigma2 <dbl>, cvix_mnes20 <dbl>, rix <dbl>, rixnorm <dbl>, > #   tlm_sigma2 <dbl>, tlm_delta20 <dbl>, slopedn <dbl>, slopeup <dbl>"},{"path":"https://sstoeckl.github.io/rqmoms/index.html","id":"parameters--defaults--customization","dir":"","previous_headings":"","what":"Parameters — defaults & customization","title":"rqmoms","text":"Defaults mirror Python (grid, filters, CVIX/TLM windows, slope windows):","code":"rq_default_params() > $atmfwd > [1] FALSE >  > $grid > $grid$number_points > [1] 500 >  > $grid$grid_limit > [1] 2 >  >  > $filter > $filter$mnes_lim > [1]    0 1000 >  > $filter$delta_put_lim > [1] -0.499  0.000 >  > $filter$delta_call_lim > [1] 0.0 0.5 >  > $filter$best_bid_zero > [1] -1 >  > $filter$open_int_zero > [1] -1 >  > $filter$min_price > [1] 0 >  >  > $semivars > $semivars$compute > [1] TRUE >  >  > $mfismfik > $mfismfik$compute > [1] TRUE >  >  > $cvix > $cvix$compute > [1] TRUE >  > $cvix$abs_dev > $cvix$abs_dev[[1]] > [1] 0.2 >  >  > $cvix$vol_dev > $cvix$vol_dev[[1]] > [1] 2 >  >  >  > $rix > $rix$compute > [1] TRUE >  >  > $tlm > $tlm$compute > [1] TRUE >  > $tlm$delta_lim > $tlm$delta_lim[[1]] > [1] 20 >  >  > $tlm$vol_lim > $tlm$vol_lim[[1]] > [1] 2 >  >  >  > $slope > $slope$compute > [1] TRUE >  > $slope$deltaP_lim > [1] -0.50 -0.05 >  > $slope$deltaC_lim > [1] 0.05 0.50"},{"path":"https://sstoeckl.github.io/rqmoms/index.html","id":"change-whats-computed-and-tweak-windows","dir":"","previous_headings":"Parameters — defaults & customization","what":"Change what’s computed and tweak windows","title":"rqmoms","text":"","code":"params2 <- rq_default_params()  # Example: turn off TLM, adjust slope & CVIX windows params2 <- utils::modifyList(params2, list(   tlm   = list(compute = FALSE),   slope = list(compute = TRUE, deltaP_lim = c(-0.4, -0.1), deltaC_lim = c(0.05, 0.5)),   cvix  = list(compute = TRUE, abs_dev = list(0.1, 0.2, 0.3), vol_dev = list(1.5, 2)) ))  one <- subset(qmoms_surface, id == qmoms_surface$id[1] & days == qmoms_surface$days[1]) r30 <- get_rate_for_maturity(qmoms_zerocd, date = one$date[1], days = one$days[1]) res_custom <- qmoms_compute(one$mnes, one$impl_volatility, one$days[1], r30, params2, output = \"list\")  str(res_custom[names(res_custom)[startsWith(names(res_custom), \"cvix_\")]]) > List of 2 >  $ cvix_sigma2: num 1.94 >  $ cvix_mnes20: num 1.2"},{"path":"https://sstoeckl.github.io/rqmoms/index.html","id":"slopes-sign-convention","dir":"","previous_headings":"Parameters — defaults & customization","what":"Slopes (sign convention)","title":"rqmoms","text":"slopedn OLS slope IV Δ put side; slopeup minus OLS slope call side (larger slopeup ⇒ steeper right tail). matches Python implementation.","code":""},{"path":"https://sstoeckl.github.io/rqmoms/index.html","id":"dev-python-parity-vignette","dir":"","previous_headings":"","what":"Dev: Python parity vignette","title":"rqmoms","text":"vignette “Python parity: R vs Python outputs” reproduces grouped examples prints side--side diffs metrics. Coming soon: vignettes/python-parity.Rmd appear pkgdown site Articles → Python parity. (vignette optional developers keep local clone Python repo python/qmoms_src private virtualenv. R package pure R.)","code":""},{"path":"https://sstoeckl.github.io/rqmoms/index.html","id":"what-does-qmoms_compute-return","dir":"","previous_headings":"","what":"What does qmoms_compute() return?","title":"rqmoms","text":"Keys match Python package exactly:","code":""},{"path":"https://sstoeckl.github.io/rqmoms/index.html","id":"citation--credits","dir":"","previous_headings":"","what":"Citation & Credits","title":"rqmoms","text":"package pure-R re-implementation vilkovgr/qmoms. use rqmoms, please also cite original Python package related research authors.","code":""},{"path":"https://sstoeckl.github.io/rqmoms/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"rqmoms","text":"MIT. See LICENSE.","code":""},{"path":"https://sstoeckl.github.io/rqmoms/reference/filter_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter option rows by moneyness, delta windows and quality flags — filter_options","title":"Filter option rows by moneyness, delta windows and quality flags — filter_options","text":"Mirrors Python helper: removes --money quotes rows outside delta windows; optionally enforces open interest / bid / min price.","code":""},{"path":"https://sstoeckl.github.io/rqmoms/reference/filter_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter option rows by moneyness, delta windows and quality flags — filter_options","text":"","code":"filter_options(optdata, filter)"},{"path":"https://sstoeckl.github.io/rqmoms/reference/filter_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter option rows by moneyness, delta windows and quality flags — filter_options","text":"optdata data frame columns mnes, optional delta, optionally open_interest, best_bid, best_offer, prem. filter list bounds (see rq_default_params()$filter), e.g. mnes_lim, delta_put_lim, delta_call_lim, open_int_zero, best_bid_zero, min_price.","code":""},{"path":"https://sstoeckl.github.io/rqmoms/reference/filter_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter option rows by moneyness, delta windows and quality flags — filter_options","text":"filtered data frame (sorted id, date, mnes present).","code":""},{"path":"https://sstoeckl.github.io/rqmoms/reference/filter_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter option rows by moneyness, delta windows and quality flags — filter_options","text":"","code":"# keep only OTM & within delta windows head(filter_options(qmoms_surface, rq_default_params()$filter)) #> # A tibble: 0 × 7 #> # ℹ 7 variables: id <int>, date <date>, days <int>, mnes <dbl>, prem <dbl>, #> #   impl_volatility <dbl>, delta <dbl>"},{"path":"https://sstoeckl.github.io/rqmoms/reference/get_rate_for_maturity.html","id":null,"dir":"Reference","previous_headings":"","what":"Interpolate a zero rate for a given maturity (or merge rates into a surface) — get_rate_for_maturity","title":"Interpolate a zero rate for a given maturity (or merge rates into a surface) — get_rate_for_maturity","text":"Interpolates zero curve date days, returning either single scalar rate (date days given) merging rate column surface data frame (df_surf).","code":""},{"path":"https://sstoeckl.github.io/rqmoms/reference/get_rate_for_maturity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interpolate a zero rate for a given maturity (or merge rates into a surface) — get_rate_for_maturity","text":"","code":"get_rate_for_maturity(df_rate, df_surf = NULL, date = NULL, days = NULL)"},{"path":"https://sstoeckl.github.io/rqmoms/reference/get_rate_for_maturity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interpolate a zero rate for a given maturity (or merge rates into a surface) — get_rate_for_maturity","text":"df_rate Data frame date, days, rate (decimal p..). df_surf Optional surface date, days. supplied, returns df_surf rate column merged date/maturity. date Optional single Date scalar interpolation. days Optional single integer days--maturity scalar interpolation.","code":""},{"path":"https://sstoeckl.github.io/rqmoms/reference/get_rate_for_maturity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interpolate a zero rate for a given maturity (or merge rates into a surface) — get_rate_for_maturity","text":"numeric rate (date & days given) data frame rate column (df_surf given).","code":""},{"path":"https://sstoeckl.github.io/rqmoms/reference/get_rate_for_maturity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interpolate a zero rate for a given maturity (or merge rates into a surface) — get_rate_for_maturity","text":"","code":"# scalar interpolation one <- subset(qmoms_surface, id == qmoms_surface$id[1] & days == qmoms_surface$days[1]) get_rate_for_maturity(qmoms_zerocd, date = one$date[1], days = one$days[1]) #> [1] 5.696391  # merge into a surface head(get_rate_for_maturity(qmoms_zerocd, df_surf = qmoms_surface)) #>         date days    id      mnes       prem impl_volatility delta     rate #> 1 1996-01-04   30 10078 0.8434704 0.19102731        0.846721    80 5.696391 #> 2 1996-01-04   30 10078 0.8532319 0.02774165        0.777861   -20 5.696391 #> 3 1996-01-04   30 10078 0.8791257 0.16572706        0.840091    75 5.696391 #> 4 1996-01-04   30 10078 0.8856444 0.03724119        0.777003   -25 5.696391 #> 5 1996-01-04   30 10078 0.9119773 0.14416711        0.833504    70 5.696391 #> 6 1996-01-04   30 10078 0.9154844 0.04795205        0.779121   -30 5.696391"},{"path":"https://sstoeckl.github.io/rqmoms/reference/interpolate_iv_by_moneyness.html","id":null,"dir":"Reference","previous_headings":"","what":"PCHIP-Interpolation + Clamping (Python-kompatibel) — interpolate_iv_by_moneyness","title":"PCHIP-Interpolation + Clamping (Python-kompatibel) — interpolate_iv_by_moneyness","text":"PCHIP-Interpolation + Clamping (Python-kompatibel)","code":""},{"path":"https://sstoeckl.github.io/rqmoms/reference/interpolate_iv_by_moneyness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PCHIP-Interpolation + Clamping (Python-kompatibel) — interpolate_iv_by_moneyness","text":"","code":"interpolate_iv_by_moneyness(mnes, vol, grid)"},{"path":"https://sstoeckl.github.io/rqmoms/reference/pyref_compute.html","id":null,"dir":"Reference","previous_headings":"","what":"DEV: compute via Python reference (not exported) — pyref_compute","title":"DEV: compute via Python reference (not exported) — pyref_compute","text":"DEV: compute via Python reference (exported)","code":""},{"path":"https://sstoeckl.github.io/rqmoms/reference/pyref_compute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DEV: compute via Python reference (not exported) — pyref_compute","text":"","code":"pyref_compute(mnes, vol, days, rate, params = rq_default_params())"},{"path":"https://sstoeckl.github.io/rqmoms/reference/qmoms_compute.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute moments for one (id,date,days) combo (pure R) — qmoms_compute","title":"Compute moments for one (id,date,days) combo (pure R) — qmoms_compute","text":"Compute moments one (id,date,days) combo (pure R)","code":""},{"path":"https://sstoeckl.github.io/rqmoms/reference/qmoms_compute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute moments for one (id,date,days) combo (pure R) — qmoms_compute","text":"","code":"qmoms_compute(   mnes,   vol,   days,   rate,   params = rq_default_params(),   output = c(\"list\", \"pandas\") )"},{"path":"https://sstoeckl.github.io/rqmoms/reference/qmoms_compute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute moments for one (id,date,days) combo (pure R) — qmoms_compute","text":"mnes numeric K/S (sorted internally) vol numeric IV days integer days maturity rate numeric risk-free (per year) params list rq_default_params() output 'list' (default) 'pandas' (1-row tibble)","code":""},{"path":"https://sstoeckl.github.io/rqmoms/reference/qmoms_compute_bygroup.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute qmoms for a single grouped surface (convenience wrapper) — qmoms_compute_bygroup","title":"Compute qmoms for a single grouped surface (convenience wrapper) — qmoms_compute_bygroup","text":"Accepts one (id, date, days) surface returns one-row tibble keys plus qmoms metrics. Column names can remapped via cols_map.","code":""},{"path":"https://sstoeckl.github.io/rqmoms/reference/qmoms_compute_bygroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute qmoms for a single grouped surface (convenience wrapper) — qmoms_compute_bygroup","text":"","code":"qmoms_compute_bygroup(   groupparams,   id = NULL,   rate = NULL,   days = NULL,   date = NULL,   cols_map = list(id = \"id\", date = \"date\", days = \"days\", rate = \"rate\", mnes = \"mnes\",     impl_volatility = \"impl_volatility\") )"},{"path":"https://sstoeckl.github.io/rqmoms/reference/qmoms_compute_bygroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute qmoms for a single grouped surface (convenience wrapper) — qmoms_compute_bygroup","text":"groupparams list group treated well parameters returned rq_default_params(). id, date, days, rate Optional scalar overrides group keys rate. rate NULL, function look rate column x. cols_map Optional named list mapping required columns x expected names, e.g. list(id=\"ID\", date=\"Date\", days=\"Days\", rate=\"Rate\", mnes=\"M\", impl_volatility=\"IV\"). x data.frame/tibble containing single surface. Must include columns moneyness IV (default: mnes, impl_volatility); optionally rate don’t pass rate explicitly.","code":""},{"path":"https://sstoeckl.github.io/rqmoms/reference/qmoms_compute_bygroup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute qmoms for a single grouped surface (convenience wrapper) — qmoms_compute_bygroup","text":"one-row tibble id, date, days qmoms metrics.","code":""},{"path":"https://sstoeckl.github.io/rqmoms/reference/qmoms_compute_bygroup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute qmoms for a single grouped surface (convenience wrapper) — qmoms_compute_bygroup","text":"","code":"g <- subset(qmoms_surface, id == qmoms_surface$id[1] & days == qmoms_surface$days[1]) qmoms_compute_bygroup(list(g, rq_default_params())) #> Error in -r: invalid argument to unary operator"},{"path":"https://sstoeckl.github.io/rqmoms/reference/qmoms_surface.html","id":null,"dir":"Reference","previous_headings":"","what":"Example implied-vol surface (from vilkovgr/qmoms) — qmoms_surface","title":"Example implied-vol surface (from vilkovgr/qmoms) — qmoms_surface","text":"tibble implied vol surfaces several id/date/days snapshots. Column names units mirror Python examples.","code":""},{"path":"https://sstoeckl.github.io/rqmoms/reference/qmoms_surface.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example implied-vol surface (from vilkovgr/qmoms) — qmoms_surface","text":"","code":"qmoms_surface"},{"path":"https://sstoeckl.github.io/rqmoms/reference/qmoms_surface.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example implied-vol surface (from vilkovgr/qmoms) — qmoms_surface","text":"tibble columns: id integer — underlying identifier date Date — observation date days integer — calendar days maturity mnes numeric — moneyness K/S impl_volatility numeric — Black(–Scholes) implied volatility delta numeric (optional) — quote delta available best_bid, best_offer, open_interest, prem optional numeric fields, present","code":""},{"path":"https://sstoeckl.github.io/rqmoms/reference/qmoms_surface.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example implied-vol surface (from vilkovgr/qmoms) — qmoms_surface","text":"https://github.com/vilkovgr/qmoms (data/surface.csv)","code":""},{"path":"https://sstoeckl.github.io/rqmoms/reference/qmoms_zerocd.html","id":null,"dir":"Reference","previous_headings":"","what":"Example zero curve (from vilkovgr/qmoms) — qmoms_zerocd","title":"Example zero curve (from vilkovgr/qmoms) — qmoms_zerocd","text":"Zero rates date days used value surface. Rates decimal (e.g. 0.02 = 2% per annum). original CSV percent, data-raw script converts .","code":""},{"path":"https://sstoeckl.github.io/rqmoms/reference/qmoms_zerocd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example zero curve (from vilkovgr/qmoms) — qmoms_zerocd","text":"","code":"qmoms_zerocd"},{"path":"https://sstoeckl.github.io/rqmoms/reference/qmoms_zerocd.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example zero curve (from vilkovgr/qmoms) — qmoms_zerocd","text":"tibble columns: date Date days integer — calendar days maturity rate numeric — zero rate (decimal p..)","code":""},{"path":"https://sstoeckl.github.io/rqmoms/reference/qmoms_zerocd.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example zero curve (from vilkovgr/qmoms) — qmoms_zerocd","text":"https://github.com/vilkovgr/qmoms (data/zerocd.csv)","code":""},{"path":"https://sstoeckl.github.io/rqmoms/reference/rq_default_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Default parameters (mirrors Python qmoms_params.default_params) — rq_default_params","title":"Default parameters (mirrors Python qmoms_params.default_params) — rq_default_params","text":"Default parameters (mirrors Python qmoms_params.default_params)","code":""},{"path":"https://sstoeckl.github.io/rqmoms/reference/rq_default_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default parameters (mirrors Python qmoms_params.default_params) — rq_default_params","text":"","code":"rq_default_params()"},{"path":"https://sstoeckl.github.io/rqmoms/news/index.html","id":"rqmoms-development-version","dir":"Changelog","previous_headings":"","what":"rqmoms (development version)","title":"rqmoms (development version)","text":"Initial CRAN submission.","code":""}]
